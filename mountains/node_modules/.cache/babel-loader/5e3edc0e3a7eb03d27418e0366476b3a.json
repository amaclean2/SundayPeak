{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { seasonOptions } from './utils';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SeasonList = _ref => {\n  _s();\n\n  let {\n    seasons\n  } = _ref;\n  const [seasonList, setSeasonList] = useState(null);\n  const [inline, setInline] = useState(false);\n  useEffect(() => {\n    if (seasonList && typeof seasonList === 'object') {\n      let lastValue;\n      const testInline = seasonList.every(value => {\n        if (!lastValue) {\n          return true;\n        } else {\n          return value - lastValue === 1;\n        }\n      });\n      setInline(testInline);\n    } else {\n      setSeasonList(typeof seasons === 'string' ? JSON.parse(seasons) : seasons);\n    }\n  }, [seasonList, seasons]);\n  if (!seasonList) return null;\n\n  if (inline) {\n    return `${seasonOptions[seasonList[0] - 1]} - ${seasonOptions[seasonList[seasonList.length - 1] - 1]}`;\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: seasonList.map((item, key) => `${seasonOptions[item - 1]}`)\n    }, void 0, false);\n  }\n};\n\n_s(SeasonList, \"UrheTs9rpfM6tKpW++fUBUD697Y=\");\n\n_c = SeasonList;\nexport default SeasonList;\n\nvar _c;\n\n$RefreshReg$(_c, \"SeasonList\");","map":{"version":3,"names":["useEffect","useState","seasonOptions","SeasonList","seasons","seasonList","setSeasonList","inline","setInline","lastValue","testInline","every","value","JSON","parse","length","map","item","key"],"sources":["/Users/andrewmaclean/BackyardFriends/mountains/src/Components/AdventureEditor/SeasonList.js"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { seasonOptions } from './utils'\n\nconst SeasonList = ({ seasons }) => {\n\tconst [seasonList, setSeasonList] = useState(null)\n\tconst [inline, setInline] = useState(false)\n\n\tuseEffect(() => {\n\t\tif (seasonList && typeof seasonList === 'object') {\n\t\t\tlet lastValue\n\t\t\tconst testInline = seasonList.every((value) => {\n\t\t\t\tif (!lastValue) {\n\t\t\t\t\treturn true\n\t\t\t\t} else {\n\t\t\t\t\treturn value - lastValue === 1\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tsetInline(testInline)\n\t\t} else {\n\t\t\tsetSeasonList(typeof seasons === 'string' ? JSON.parse(seasons) : seasons)\n\t\t}\n\t}, [seasonList, seasons])\n\n\tif (!seasonList) return null\n\n\tif (inline) {\n\t\treturn `${seasonOptions[seasonList[0] - 1]} - ${\n\t\t\tseasonOptions[seasonList[seasonList.length - 1] - 1]\n\t\t}`\n\t} else {\n\t\treturn <>{seasonList.map((item, key) => `${seasonOptions[item - 1]}`)}</>\n\t}\n}\n\nexport default SeasonList\n"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,aAAT,QAA8B,SAA9B;;;;AAEA,MAAMC,UAAU,GAAG,QAAiB;EAAA;;EAAA,IAAhB;IAAEC;EAAF,CAAgB;EACnC,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,IAAD,CAA5C;EACA,MAAM,CAACM,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,KAAD,CAApC;EAEAD,SAAS,CAAC,MAAM;IACf,IAAIK,UAAU,IAAI,OAAOA,UAAP,KAAsB,QAAxC,EAAkD;MACjD,IAAII,SAAJ;MACA,MAAMC,UAAU,GAAGL,UAAU,CAACM,KAAX,CAAkBC,KAAD,IAAW;QAC9C,IAAI,CAACH,SAAL,EAAgB;UACf,OAAO,IAAP;QACA,CAFD,MAEO;UACN,OAAOG,KAAK,GAAGH,SAAR,KAAsB,CAA7B;QACA;MACD,CANkB,CAAnB;MAQAD,SAAS,CAACE,UAAD,CAAT;IACA,CAXD,MAWO;MACNJ,aAAa,CAAC,OAAOF,OAAP,KAAmB,QAAnB,GAA8BS,IAAI,CAACC,KAAL,CAAWV,OAAX,CAA9B,GAAoDA,OAArD,CAAb;IACA;EACD,CAfQ,EAeN,CAACC,UAAD,EAAaD,OAAb,CAfM,CAAT;EAiBA,IAAI,CAACC,UAAL,EAAiB,OAAO,IAAP;;EAEjB,IAAIE,MAAJ,EAAY;IACX,OAAQ,GAAEL,aAAa,CAACG,UAAU,CAAC,CAAD,CAAV,GAAgB,CAAjB,CAAoB,MAC1CH,aAAa,CAACG,UAAU,CAACA,UAAU,CAACU,MAAX,GAAoB,CAArB,CAAV,GAAoC,CAArC,CACb,EAFD;EAGA,CAJD,MAIO;IACN,oBAAO;MAAA,UAAGV,UAAU,CAACW,GAAX,CAAe,CAACC,IAAD,EAAOC,GAAP,KAAgB,GAAEhB,aAAa,CAACe,IAAI,GAAG,CAAR,CAAW,EAAzD;IAAH,iBAAP;EACA;AACD,CA9BD;;GAAMd,U;;KAAAA,U;AAgCN,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}