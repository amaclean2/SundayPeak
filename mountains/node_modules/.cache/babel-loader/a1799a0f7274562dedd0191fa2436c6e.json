{"ast":null,"code":"import { getBackendUri } from '../Constants';\nexport const validateAdventure = (currentAdventure, setAdventureError) => {\n  var _currentAdventure$sea, _currentAdventure$gea;\n\n  const coordinates = JSON.stringify(currentAdventure.coordinates);\n  let approachDistance = null;\n  let season = null;\n  let avgAngle = null;\n  let maxAngle = null;\n  let elevation = null;\n  let difficulty = null;\n  let gear = null;\n  let gain = null;\n\n  if (typeof currentAdventure.adventure_name !== 'string') {\n    setAdventureError('Adventure Name must be a string');\n    throw new Error('Adventure Name must be a string');\n  }\n\n  if (isNaN(parseInt(currentAdventure.approach_distance)) && currentAdventure.approach_distance !== '') {\n    setAdventureError('Appraoch Distance must contain a number');\n    throw new Error('Approach Distance must contain a number');\n  } else {\n    approachDistance = parseInt(currentAdventure.approach_distance);\n  }\n\n  if ((_currentAdventure$sea = currentAdventure.season) !== null && _currentAdventure$sea !== void 0 && _currentAdventure$sea.length) {\n    season = JSON.stringify(currentAdventure.season.sort((a, b) => Number(a) - Number(b)));\n  } else if (!currentAdventure.season) {\n    season = JSON.stringify([]);\n  }\n\n  if (isNaN(parseInt(currentAdventure.avg_angle)) && currentAdventure.avg_angle !== '') {\n    setAdventureError('Average Angle must contain a number');\n    throw new Error('Average angle must contain a number');\n  } else {\n    avgAngle = parseInt(currentAdventure.avg_angle);\n  }\n\n  if (isNaN(parseInt(currentAdventure.max_angle)) && currentAdventure.max_angle !== '') {\n    setAdventureError('Max Angle must contain a number');\n    throw new Error('Max angle must contain a number');\n  } else {\n    maxAngle = parseInt(currentAdventure.max_angle);\n  }\n\n  if (isNaN(parseInt(currentAdventure.elevation)) && currentAdventure.elevation !== '') {\n    setAdventureError('Elevation must contain a number');\n    throw new Error('Elevation must contain a number');\n  } else {\n    elevation = parseInt(currentAdventure.elevation);\n  }\n\n  if (isNaN(parseInt(currentAdventure.difficulty)) && currentAdventure.difficulty !== '') {\n    setAdventureError('Difficulty must contain a number');\n    throw new Error('Difficulty must contain a number');\n  } else {\n    difficulty = parseInt(currentAdventure.difficulty);\n  }\n\n  if ((_currentAdventure$gea = currentAdventure.gear) !== null && _currentAdventure$gea !== void 0 && _currentAdventure$gea.length) {\n    gear = JSON.stringify(currentAdventure.gear.sort((a, b) => Number(a) - Number(b)));\n  } else if (!currentAdventure.gear.length) {\n    gear = JSON.stringify([]);\n  }\n\n  if (isNaN(parseInt(currentAdventure.gain)) && currentAdventure.gain !== '') {\n    setAdventureError('Elevation Gain must contain a number');\n    throw new Error('Elevation Gain must contian a number');\n  } else {\n    gain = parseInt(currentAdventure.gain);\n  }\n\n  const adventureObj = {\n    adventure_type: 'line',\n    adventure_name: currentAdventure.adventure_name,\n    approach_distance: approachDistance,\n    season,\n    avg_angle: avgAngle,\n    max_angle: maxAngle,\n    elevation,\n    difficulty,\n    gear,\n    gain,\n    bio: currentAdventure.bio || '',\n    nearest_city: currentAdventure.nearest_city || null,\n    coordinates\n  };\n  return adventureObj;\n};\nexport const validateUser = (newUser, setUserError) => {};\nexport const myThrottle = (cb, delay) => {\n  let lastTime = 0;\n  return function () {\n    const now = Date.now();\n    console.log(now, lastTime);\n\n    if (now - lastTime < delay) {\n      return;\n    }\n\n    lastTime = now;\n    cb(...arguments);\n  };\n};\nexport const fetcher = (url, options) => {\n  var _options$headers;\n\n  const uri = getBackendUri();\n  const token = localStorage.getItem('token');\n  const headers = new Headers();\n  let body = null;\n  options === null || options === void 0 ? void 0 : (_options$headers = options.headers) === null || _options$headers === void 0 ? void 0 : _options$headers.forEach(header => {\n    headers.append(header.name, header.value);\n  });\n\n  if (token) {\n    headers.append('authorization', `Bearer ${token}`);\n  }\n\n  if (!headers.get('content-type')) {\n    headers.append('content-type', 'application/json');\n  }\n\n  if (options !== null && options !== void 0 && options.body && headers.get('content-type') === 'application/json') {\n    body = JSON.stringify(options.body);\n  } else if (headers.get('content-type') !== 'application/json' && options !== null && options !== void 0 && options.body) {\n    body = options.body;\n  }\n\n  if (headers.get('content-type') === 'none') {\n    headers.delete('content-type');\n  }\n\n  const request = new Request(`${uri}${url}`, { ...(!!body && {\n      body\n    }),\n    headers,\n    method: (options === null || options === void 0 ? void 0 : options.method) || 'GET'\n  });\n  console.log('FETCHING', url, headers);\n  return fetch(request).then(resp => {\n    if (resp.status !== 204) {\n      return resp.json();\n    } else {\n      return resp;\n    }\n  }).then(data => {\n    if (data.status - 200 >= 100) {\n      throw data;\n    }\n\n    return data;\n  });\n};","map":{"version":3,"names":["getBackendUri","validateAdventure","currentAdventure","setAdventureError","coordinates","JSON","stringify","approachDistance","season","avgAngle","maxAngle","elevation","difficulty","gear","gain","adventure_name","Error","isNaN","parseInt","approach_distance","length","sort","a","b","Number","avg_angle","max_angle","adventureObj","adventure_type","bio","nearest_city","validateUser","newUser","setUserError","myThrottle","cb","delay","lastTime","now","Date","console","log","fetcher","url","options","uri","token","localStorage","getItem","headers","Headers","body","forEach","header","append","name","value","get","delete","request","Request","method","fetch","then","resp","status","json","data"],"sources":["/Users/andrewmaclean/BackyardFriends/mountains/src/Providers/utils.js"],"sourcesContent":["import { getBackendUri } from '../Constants'\n\nexport const validateAdventure = (currentAdventure, setAdventureError) => {\n\tconst coordinates = JSON.stringify(currentAdventure.coordinates)\n\tlet approachDistance = null\n\tlet season = null\n\tlet avgAngle = null\n\tlet maxAngle = null\n\tlet elevation = null\n\tlet difficulty = null\n\tlet gear = null\n\tlet gain = null\n\n\tif (typeof currentAdventure.adventure_name !== 'string') {\n\t\tsetAdventureError('Adventure Name must be a string')\n\t\tthrow new Error('Adventure Name must be a string')\n\t}\n\n\tif (\n\t\tisNaN(parseInt(currentAdventure.approach_distance)) &&\n\t\tcurrentAdventure.approach_distance !== ''\n\t) {\n\t\tsetAdventureError('Appraoch Distance must contain a number')\n\t\tthrow new Error('Approach Distance must contain a number')\n\t} else {\n\t\tapproachDistance = parseInt(currentAdventure.approach_distance)\n\t}\n\n\tif (currentAdventure.season?.length) {\n\t\tseason = JSON.stringify(currentAdventure.season.sort((a, b) => Number(a) - Number(b)))\n\t} else if (!currentAdventure.season) {\n\t\tseason = JSON.stringify([])\n\t}\n\n\tif (isNaN(parseInt(currentAdventure.avg_angle)) && currentAdventure.avg_angle !== '') {\n\t\tsetAdventureError('Average Angle must contain a number')\n\t\tthrow new Error('Average angle must contain a number')\n\t} else {\n\t\tavgAngle = parseInt(currentAdventure.avg_angle)\n\t}\n\n\tif (isNaN(parseInt(currentAdventure.max_angle)) && currentAdventure.max_angle !== '') {\n\t\tsetAdventureError('Max Angle must contain a number')\n\t\tthrow new Error('Max angle must contain a number')\n\t} else {\n\t\tmaxAngle = parseInt(currentAdventure.max_angle)\n\t}\n\n\tif (isNaN(parseInt(currentAdventure.elevation)) && currentAdventure.elevation !== '') {\n\t\tsetAdventureError('Elevation must contain a number')\n\t\tthrow new Error('Elevation must contain a number')\n\t} else {\n\t\televation = parseInt(currentAdventure.elevation)\n\t}\n\n\tif (isNaN(parseInt(currentAdventure.difficulty)) && currentAdventure.difficulty !== '') {\n\t\tsetAdventureError('Difficulty must contain a number')\n\t\tthrow new Error('Difficulty must contain a number')\n\t} else {\n\t\tdifficulty = parseInt(currentAdventure.difficulty)\n\t}\n\n\tif (currentAdventure.gear?.length) {\n\t\tgear = JSON.stringify(currentAdventure.gear.sort((a, b) => Number(a) - Number(b)))\n\t} else if (!currentAdventure.gear.length) {\n\t\tgear = JSON.stringify([])\n\t}\n\n\tif (isNaN(parseInt(currentAdventure.gain)) && currentAdventure.gain !== '') {\n\t\tsetAdventureError('Elevation Gain must contain a number')\n\t\tthrow new Error('Elevation Gain must contian a number')\n\t} else {\n\t\tgain = parseInt(currentAdventure.gain)\n\t}\n\n\tconst adventureObj = {\n\t\tadventure_type: 'line',\n\t\tadventure_name: currentAdventure.adventure_name,\n\t\tapproach_distance: approachDistance,\n\t\tseason,\n\t\tavg_angle: avgAngle,\n\t\tmax_angle: maxAngle,\n\t\televation,\n\t\tdifficulty,\n\t\tgear,\n\t\tgain,\n\t\tbio: currentAdventure.bio || '',\n\t\tnearest_city: currentAdventure.nearest_city || null,\n\t\tcoordinates\n\t}\n\n\treturn adventureObj\n}\n\nexport const validateUser = (newUser, setUserError) => {}\n\nexport const myThrottle = (cb, delay) => {\n\tlet lastTime = 0\n\n\treturn (...args) => {\n\t\tconst now = Date.now()\n\t\tconsole.log(now, lastTime)\n\t\tif (now - lastTime < delay) {\n\t\t\treturn\n\t\t}\n\n\t\tlastTime = now\n\t\tcb(...args)\n\t}\n}\n\nexport const fetcher = (url, options) => {\n\tconst uri = getBackendUri()\n\tconst token = localStorage.getItem('token')\n\tconst headers = new Headers()\n\n\tlet body = null\n\n\toptions?.headers?.forEach((header) => {\n\t\theaders.append(header.name, header.value)\n\t})\n\n\tif (token) {\n\t\theaders.append('authorization', `Bearer ${token}`)\n\t}\n\n\tif (!headers.get('content-type')) {\n\t\theaders.append('content-type', 'application/json')\n\t}\n\n\tif (options?.body && headers.get('content-type') === 'application/json') {\n\t\tbody = JSON.stringify(options.body)\n\t} else if (headers.get('content-type') !== 'application/json' && options?.body) {\n\t\tbody = options.body\n\t}\n\n\tif (headers.get('content-type') === 'none') {\n\t\theaders.delete('content-type')\n\t}\n\n\tconst request = new Request(`${uri}${url}`, {\n\t\t...(!!body && { body }),\n\t\theaders,\n\t\tmethod: options?.method || 'GET'\n\t})\n\n\tconsole.log('FETCHING', url, headers)\n\treturn fetch(request)\n\t\t.then((resp) => {\n\t\t\tif (resp.status !== 204) {\n\t\t\t\treturn resp.json()\n\t\t\t} else {\n\t\t\t\treturn resp\n\t\t\t}\n\t\t})\n\t\t.then((data) => {\n\t\t\tif (data.status - 200 >= 100) {\n\t\t\t\tthrow data\n\t\t\t}\n\n\t\t\treturn data\n\t\t})\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}