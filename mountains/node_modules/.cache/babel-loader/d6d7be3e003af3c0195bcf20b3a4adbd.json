{"ast":null,"code":"import { getBackendUri } from \"../Constants\";\nexport const validateAdventure = (currentAdventure, setAdventureError) => {\n  var _currentAdventure$sea, _currentAdventure$gea;\n\n  const coordinates = JSON.stringify(currentAdventure.coordinates);\n  let approachDistance = null;\n  let season = null;\n  let avgAngle = null;\n  let maxAngle = null;\n  let elevation = null;\n  let difficulty = null;\n  let gear = null;\n  let gain = null;\n\n  if (typeof currentAdventure.adventure_name !== 'string') {\n    setAdventureError('Adventure Name must be a string');\n    throw new Error('Adventure Name must be a string');\n  }\n\n  if (isNaN(parseInt(currentAdventure.approach_distance)) && currentAdventure.approach_distance !== '') {\n    setAdventureError('Appraoch Distance must contain a number');\n    throw new Error('Approach Distance must contain a number');\n  } else {\n    approachDistance = parseInt(currentAdventure.approach_distance);\n  }\n\n  if ((_currentAdventure$sea = currentAdventure.season) !== null && _currentAdventure$sea !== void 0 && _currentAdventure$sea.length) {\n    season = JSON.stringify(currentAdventure.season.sort((a, b) => Number(a) - Number(b)));\n  } else if (!currentAdventure.season) {\n    season = JSON.stringify([]);\n  }\n\n  if (isNaN(parseInt(currentAdventure.avg_angle)) && currentAdventure.avg_angle !== '') {\n    setAdventureError('Average Angle must contain a number');\n    throw new Error('Average angle must contain a number');\n  } else {\n    avgAngle = parseInt(currentAdventure.avg_angle);\n  }\n\n  if (isNaN(parseInt(currentAdventure.max_angle)) && currentAdventure.max_angle !== '') {\n    setAdventureError('Max Angle must contain a number');\n    throw new Error('Max angle must contain a number');\n  } else {\n    maxAngle = parseInt(currentAdventure.max_angle);\n  }\n\n  if (isNaN(parseInt(currentAdventure.elevation)) && currentAdventure.elevation !== '') {\n    setAdventureError('Elevation must contain a number');\n    throw new Error('Elevation must contain a number');\n  } else {\n    elevation = parseInt(currentAdventure.elevation);\n  }\n\n  if (isNaN(parseInt(currentAdventure.difficulty)) && currentAdventure.difficulty !== '') {\n    setAdventureError('Difficulty must contain a number');\n    throw new Error('Difficulty must contain a number');\n  } else {\n    difficulty = parseInt(currentAdventure.difficulty);\n  }\n\n  if ((_currentAdventure$gea = currentAdventure.gear) !== null && _currentAdventure$gea !== void 0 && _currentAdventure$gea.length) {\n    gear = JSON.stringify(currentAdventure.gear.sort((a, b) => Number(a) - Number(b)));\n  } else if (!currentAdventure.gear.length) {\n    gear = JSON.stringify([]);\n  }\n\n  if (isNaN(parseInt(currentAdventure.gain)) && currentAdventure.gain !== '') {\n    setAdventureError('Elevation Gain must contain a number');\n    throw new Error('Elevation Gain must contian a number');\n  } else {\n    gain = parseInt(currentAdventure.gain);\n  }\n\n  const adventureObj = {\n    adventure_type: 'line',\n    adventure_name: currentAdventure.adventure_name,\n    approach_distance: approachDistance,\n    season,\n    avg_angle: avgAngle,\n    max_angle: maxAngle,\n    elevation,\n    difficulty,\n    gear,\n    gain,\n    bio: currentAdventure.bio || '',\n    nearest_city: currentAdventure.nearest_city || null,\n    coordinates\n  };\n  return adventureObj;\n};\nexport const validateUser = (newUser, setUserError) => {};\nexport const fetcher = (url, options) => {\n  var _options$headers;\n\n  const uri = getBackendUri();\n  const token = localStorage.getItem('token');\n  const headers = new Headers();\n  let body = null;\n  options === null || options === void 0 ? void 0 : (_options$headers = options.headers) === null || _options$headers === void 0 ? void 0 : _options$headers.forEach(header => {\n    headers.append(header.name, header.value);\n  });\n\n  if (token) {\n    headers.append('authorization', `Bearer ${token}`);\n  }\n\n  if (!headers.get('content-type')) {\n    headers.append('content-type', 'application/json');\n  }\n\n  if (options !== null && options !== void 0 && options.body && headers.get('content-type') === 'application/json') {\n    body = JSON.stringify(options.body);\n  } else if (headers.get('content-type') !== 'application/json' && options !== null && options !== void 0 && options.body) {\n    body = options.body;\n  }\n\n  if (headers.get('content-type') === 'none') {\n    headers.delete('content-type');\n  }\n\n  const request = new Request(`${uri}${url}`, { ...(!!body && {\n      body\n    }),\n    headers,\n    method: (options === null || options === void 0 ? void 0 : options.method) || 'GET'\n  });\n  console.log('FETCHING', url, headers);\n  return fetch(request).then(resp => {\n    if (resp.status !== 204) {\n      return resp.json();\n    } else {\n      return resp;\n    }\n  }).then(data => {\n    if (data.status - 200 >= 100) {\n      throw data;\n    }\n\n    return data;\n  });\n};","map":{"version":3,"names":["getBackendUri","validateAdventure","currentAdventure","setAdventureError","coordinates","JSON","stringify","approachDistance","season","avgAngle","maxAngle","elevation","difficulty","gear","gain","adventure_name","Error","isNaN","parseInt","approach_distance","length","sort","a","b","Number","avg_angle","max_angle","adventureObj","adventure_type","bio","nearest_city","validateUser","newUser","setUserError","fetcher","url","options","uri","token","localStorage","getItem","headers","Headers","body","forEach","header","append","name","value","get","delete","request","Request","method","console","log","fetch","then","resp","status","json","data"],"sources":["/Users/andrewmaclean/BackyardFriends/mountains/src/Providers/utils.js"],"sourcesContent":["import { getBackendUri } from \"../Constants\";\n\nexport const validateAdventure = (currentAdventure, setAdventureError) => {\n\n    const coordinates = JSON.stringify(currentAdventure.coordinates);\n    let approachDistance = null;\n    let season = null;\n    let avgAngle = null;\n    let maxAngle = null;\n    let elevation = null;\n    let difficulty = null;\n    let gear = null;\n    let gain = null;\n\n    if (typeof currentAdventure.adventure_name !== 'string') {\n        setAdventureError('Adventure Name must be a string');\n        throw new Error('Adventure Name must be a string');\n    }\n\n    if (isNaN(parseInt(currentAdventure.approach_distance)) && currentAdventure.approach_distance !== '') {\n        setAdventureError('Appraoch Distance must contain a number');\n        throw new Error('Approach Distance must contain a number');\n    } else {\n        approachDistance = parseInt(currentAdventure.approach_distance);\n    }\n\n    if (currentAdventure.season?.length) {\n        season = JSON.stringify(currentAdventure.season.sort((a, b) => Number(a) - Number(b)));\n    } else if (!currentAdventure.season) {\n        season = JSON.stringify([]);\n    }\n\n    if (isNaN(parseInt(currentAdventure.avg_angle)) && currentAdventure.avg_angle !== '') {\n        setAdventureError('Average Angle must contain a number');\n        throw new Error('Average angle must contain a number');\n    } else {\n        avgAngle = parseInt(currentAdventure.avg_angle);\n    }\n\n    if (isNaN(parseInt(currentAdventure.max_angle)) && currentAdventure.max_angle !== '') {\n        setAdventureError('Max Angle must contain a number');\n        throw new Error('Max angle must contain a number');\n    } else {\n        maxAngle = parseInt(currentAdventure.max_angle);\n    }\n\n    if (isNaN(parseInt(currentAdventure.elevation)) && currentAdventure.elevation !== '') {\n        setAdventureError('Elevation must contain a number');\n        throw new Error('Elevation must contain a number');\n    } else {\n        elevation = parseInt(currentAdventure.elevation);\n    }\n\n    if (isNaN(parseInt(currentAdventure.difficulty)) && currentAdventure.difficulty !== '') {\n        setAdventureError('Difficulty must contain a number');\n        throw new Error('Difficulty must contain a number');\n    } else {\n        difficulty = parseInt(currentAdventure.difficulty);\n    }\n\n    if (currentAdventure.gear?.length) {\n        gear = JSON.stringify(currentAdventure.gear.sort((a, b) => Number(a) - Number(b)));\n    } else if (!currentAdventure.gear.length) {\n        gear = JSON.stringify([]);\n    }\n\n    if (isNaN(parseInt(currentAdventure.gain)) && currentAdventure.gain !== '') {\n        setAdventureError('Elevation Gain must contain a number');\n        throw new Error('Elevation Gain must contian a number');\n    } else {\n        gain = parseInt(currentAdventure.gain);\n    }\n\n    const adventureObj = {\n        adventure_type: 'line',\n        adventure_name: currentAdventure.adventure_name,\n        approach_distance: approachDistance,\n        season,\n        avg_angle: avgAngle,\n        max_angle: maxAngle,\n        elevation,\n        difficulty,\n        gear,\n        gain,\n        bio: currentAdventure.bio || '',\n        nearest_city: currentAdventure.nearest_city || null,\n        coordinates\n    };\n\n    return adventureObj;\n};\n\nexport const validateUser = (newUser, setUserError) => {\n\n};\n\nexport const fetcher = (url, options) => {\n    const uri = getBackendUri();\n    const token = localStorage.getItem('token');\n    const headers = new Headers();\n\n    let body = null;\n\n    options?.headers?.forEach((header) => {\n        headers.append(header.name, header.value);\n    });\n\n    if (token) {\n        headers.append('authorization', `Bearer ${token}`);\n    }\n\n    if (!headers.get('content-type')) {\n        headers.append('content-type', 'application/json');\n    }\n\n    if (options?.body && headers.get('content-type') === 'application/json') {\n        body = JSON.stringify(options.body);\n    } else if (headers.get('content-type') !== 'application/json' && options?.body) {\n        body = options.body;\n    }\n\n    if (headers.get('content-type') === 'none') {\n        headers.delete('content-type');\n    }\n\n    const request = new Request(`${uri}${url}`, {\n        ...(!!body && { body }),\n        headers,\n        method: options?.method || 'GET'\n    });\n\n    console.log('FETCHING', url, headers);\n    return fetch(request)\n        .then(resp => {            \n            if (resp.status !== 204) {\n                return resp.json();\n            } else {\n                return resp;\n            }\n        })\n        .then(data => {\n            if (data.status - 200 >= 100) {\n                throw data;\n            }\n\n            return data;\n        });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}